#include <iostream>
#include <fstream>
#include <unordered_map>
#include <vector>
#include <queue>
#include <cstring>
#include <string>
using namespace std;
ifstream in("date.in");
ofstream out("date.out");
int main()
{
    unordered_map <string,string> relatii;
    int nr_stari, nr_relatii, stare_initiala, i, nr_stari_finale, nr_cuvinte;
    vector <int> stari_finale;
    string cuvant, relatie, q1, q2, litera;
    in >> nr_stari >> nr_relatii;

    for (i = 1; i <= nr_relatii; i++)
    {
        in >> q1 >> q2 >> litera;
        relatii[q1 + " " + q2] = litera;
    }

    in >> stare_initiala >> nr_stari_finale;

    for (i = 1; i <= nr_stari_finale; i++)
    {
        int x;
        in >> x;
        stari_finale.push_back(x);
    }

    in >> nr_cuvinte;

    for (i = 1; i <= nr_cuvinte; i++)
    {
        queue<int> traseu;
        in >> cuvant;
        unordered_map<string, string>:: iterator p;
        int ok = 0;
        for (p = relatii.begin(); p != relatii.end(); p++)
        {
            if((int(p->first[0]) - 48) == stare_initiala and char(p->second[0]) == cuvant[0])
                ok = 1;
        }
        if (ok == 0)
        {
            out << "NU" << '\n';
        }
        else
        {

            int nr_litera = 0;
            traseu.push(stare_initiala);
            int v = traseu.front();
            while (traseu.size() <= cuvant.size() + 1)
            {
                int ok = 0;
                for (p = relatii.begin(); p != relatii.end();  p++)
                {
                    if (int(p->first[0] - 48) == int(v) and char(p->second[0]) == cuvant[nr_litera])
                    {
                        ok = 1;
                        nr_litera++;
                        traseu.push(int(p->first[2] - 48));
                        v = int(p->first[2] - 48);
                    }
                }
                if (ok == 0)
                    break;
            }
            for (int i = 0; i < stari_finale.size(); i++)
            {
                if (stari_finale[i] == v and traseu.size() == cuvant.size()+1)
                {
                    out << "DA" << '\n';
                    out << "Traseu: ";
                    while (!traseu.empty())
                    {
                        out << traseu.front() << ' ';
                        traseu.pop();
                    }
                    out << endl;
                    break;
                }
                else
                {
                    out << "NU" << '\n';
                }
            }
        }
    }
    return 0;
}
